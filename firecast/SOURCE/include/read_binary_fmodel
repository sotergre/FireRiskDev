	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 12
	.globl	_read_binary_fmodel
	.align	4, 0x90
_read_binary_fmodel:                    ## @read_binary_fmodel
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	xorl	%eax, %eax
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	%eax, %esi
	movb	$0, %al
	callq	_open
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	LBB0_2
## BB#1:
	leaq	L_.str(%rip), %rdi
	movq	-16(%rbp), %rsi
	movb	$0, %al
	callq	_printf
	movl	$-1, -4(%rbp)
	movl	%eax, -48(%rbp)         ## 4-byte Spill
	jmp	LBB0_29
LBB0_2:
	movq	-24(%rbp), %rdi
	leaq	L_.str.1(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_4
## BB#3:
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rdx
	movq	%rax, %rsi
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_26
LBB0_4:
	movq	-24(%rbp), %rdi
	leaq	L_.str.2(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_6
## BB#5:
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rdx
	movq	%rax, %rsi
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_25
LBB0_6:
	movq	-24(%rbp), %rdi
	leaq	L_.str.3(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_8
## BB#7:
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rdx
	movq	%rax, %rsi
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_24
LBB0_8:
	movq	-24(%rbp), %rdi
	leaq	L_.str.4(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_10
## BB#9:
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rdx
	movq	%rax, %rsi
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_23
LBB0_10:
	movq	-24(%rbp), %rdi
	leaq	L_.str.5(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_12
## BB#11:
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rdx
	movq	%rax, %rsi
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_22
LBB0_12:
	movq	-24(%rbp), %rdi
	leaq	L_.str.6(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_14
## BB#13:
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movslq	-44(%rbp), %rdx
	movq	%rax, %rsi
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_21
LBB0_14:
	movq	-24(%rbp), %rdi
	leaq	L_.str.7(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_16
## BB#15:
	movslq	-8(%rbp), %rax
	shlq	$0, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	movslq	-44(%rbp), %rdx
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_20
LBB0_16:
	movq	-24(%rbp), %rdi
	leaq	L_.str.8(%rip), %rsi
	callq	_strcmp
	cmpl	$0, %eax
	jne	LBB0_18
## BB#17:
	movslq	-8(%rbp), %rax
	shlq	$0, %rax
	movl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movl	-40(%rbp), %edi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	movslq	-44(%rbp), %rdx
	callq	_read
	movl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	jmp	LBB0_19
LBB0_18:
	leaq	L_.str.9(%rip), %rdi
	movb	$0, %al
	callq	_printf
	leaq	L_.str.10(%rip), %rdi
	movl	%eax, -52(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.11(%rip), %rdi
	movl	%eax, -56(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.12(%rip), %rdi
	movl	%eax, -60(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.13(%rip), %rdi
	movl	%eax, -64(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.14(%rip), %rdi
	movl	%eax, -68(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.15(%rip), %rdi
	movl	%eax, -72(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.16(%rip), %rdi
	movl	%eax, -76(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.17(%rip), %rdi
	movl	%eax, -80(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.18(%rip), %rdi
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.19(%rip), %rdi
	movl	%eax, -88(%rbp)         ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	$1, %edi
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	callq	_exit
LBB0_19:
	jmp	LBB0_20
LBB0_20:
	jmp	LBB0_21
LBB0_21:
	jmp	LBB0_22
LBB0_22:
	jmp	LBB0_23
LBB0_23:
	jmp	LBB0_24
LBB0_24:
	jmp	LBB0_25
LBB0_25:
	jmp	LBB0_26
LBB0_26:
	movl	-40(%rbp), %edi
	callq	_close
	movl	-36(%rbp), %edi
	cmpl	-44(%rbp), %edi
	movl	%eax, -96(%rbp)         ## 4-byte Spill
	je	LBB0_28
## BB#27:
	leaq	L_.str.20(%rip), %rdi
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	movq	-16(%rbp), %rcx
	movb	$0, %al
	callq	_printf
	leaq	L_.str.21(%rip), %rdi
	movq	-24(%rbp), %rsi
	movl	-8(%rbp), %edx
	movl	%eax, -100(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	leaq	L_.str.19(%rip), %rdi
	movl	%eax, -104(%rbp)        ## 4-byte Spill
	movb	$0, %al
	callq	_printf
	movl	$1, %edi
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	callq	_exit
LBB0_28:
	leaq	L_.str.22(%rip), %rdi
	movl	-36(%rbp), %esi
	movq	-16(%rbp), %rdx
	movb	$0, %al
	callq	_printf
	movl	-36(%rbp), %esi
	movl	%esi, -4(%rbp)
	movl	%eax, -112(%rbp)        ## 4-byte Spill
LBB0_29:
	movl	-4(%rbp), %eax
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"\nFile does not exist\n\n"

L_.str.1:                               ## @.str.1
	.asciz	"double"

L_.str.2:                               ## @.str.2
	.asciz	"float"

L_.str.3:                               ## @.str.3
	.asciz	"int"

L_.str.4:                               ## @.str.4
	.asciz	"uint"

L_.str.5:                               ## @.str.5
	.asciz	"sint"

L_.str.6:                               ## @.str.6
	.asciz	"usint"

L_.str.7:                               ## @.str.7
	.asciz	"char"

L_.str.8:                               ## @.str.8
	.asciz	"uchar"

L_.str.9:                               ## @.str.9
	.asciz	"The datatype passed to read_binary.c is invalid.\n"

L_.str.10:                              ## @.str.10
	.asciz	"Valid data types are:\n"

L_.str.11:                              ## @.str.11
	.asciz	"\tdouble = double precision floating point\n"

L_.str.12:                              ## @.str.12
	.asciz	"\tfloat = single precision floating point\n"

L_.str.13:                              ## @.str.13
	.asciz	"\tint = signed integer\n"

L_.str.14:                              ## @.str.14
	.asciz	"\tuint = unsigned integer\n"

L_.str.15:                              ## @.str.15
	.asciz	"\tsint = signed short integer\n"

L_.str.16:                              ## @.str.16
	.asciz	"\tusint = unsigned short integer\n"

L_.str.17:                              ## @.str.17
	.asciz	"\tchar = signed very short integer\n"

L_.str.18:                              ## @.str.18
	.asciz	"\tuchar = unsigned very short integer\n"

L_.str.19:                              ## @.str.19
	.asciz	"Exiting...\n"

L_.str.20:                              ## @.str.20
	.asciz	"Only %d of %d bytes read from %s.\n"

L_.str.21:                              ## @.str.21
	.asciz	"Check file is of type %s and number of pixels is %d.\n"

L_.str.22:                              ## @.str.22
	.asciz	"Read %d bytes from %s.\n"


.subsections_via_symbols
